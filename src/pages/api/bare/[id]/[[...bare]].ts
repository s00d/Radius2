import { NextApiRequest, NextApiResponse } from 'next'
import { createBareServer } from '@tomphttp/bare-server-node'
import { ProxyManager } from '../../proxy-manager'

// –°–æ–∑–¥–∞–Ω–∏–µ bare —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ ID
async function createBareServerWithId(id: string) {
  console.log('üöÄ API: Creating bare server for ID:', id)

  // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏
  const proxyManager = new ProxyManager()

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ ID
  let proxyConfig = null
  try {
    const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/proxies`)
    if (response.ok) {
      const data = await response.json()
      const proxy = data.proxies.find((p: any) => p.id === id)
      if (proxy) {
        proxyConfig = {
          host: proxy.host,
          port: proxy.port,
          username: proxy.username,
          password: proxy.password
        }
        console.log('üîß API: Found proxy config for ID:', id, proxyConfig.host + ':' + proxyConfig.port)
      }
    }
  } catch (error) {
    console.log('‚ö†Ô∏è API: Failed to get proxy config for ID:', id, error)
  }

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏
  if (proxyConfig) {
    proxyManager.setProxy(proxyConfig)
  } else {
    console.log('‚ö†Ô∏è API: No proxy config available for ID:', id)
    proxyManager.setProxy(null)
  }

  // –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç—ã
  const httpAgent = proxyManager.getHttpAgent()
  const httpsAgent = proxyManager.getHttpsAgent()

  return createBareServer(`/api/bare/${id}/`, {
    logErrors: true,
    localAddress: undefined,
    maintainer: {
      email: 'contact@proudparrot2.tech',
      website: 'https://github.com/proudparrot2/'
    },
    httpAgent: httpAgent || undefined,
    httpsAgent: httpsAgent || undefined
  })
}

export const config = {
  api: {
    externalResolver: true
  }
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ URL
  const id = req.query.id as string

  console.log('üöÄ API: Received request to /api/bare/' + id)
  console.log('üöÄ API: Request method:', req.method)
  console.log('üöÄ API: Request URL:', req.url)
  console.log('üöÄ API: Query params:', req.query)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ GET –∑–∞–ø—Ä–æ—Å
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  // –°–æ–∑–¥–∞–µ–º bare —Å–µ—Ä–≤–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ ID
  const bare = await createBareServerWithId(id)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ bare —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω
  if (!bare) {
    console.error('‚ùå API: Failed to create bare server')
    return res.status(500).json({ error: 'Failed to create bare server' })
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ bare —Å–µ—Ä–≤–µ—Ä
  if (req.query.bare && Array.isArray(req.query.bare)) {
    console.log('üîß API: Bare path:', req.query.bare.join('/'))
  }

  await bare.routeRequest(req, res)
}
